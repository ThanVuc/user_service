// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAndAuthor = `-- name: CreateUserAndAuthor :exec

WITH new_user AS (
  INSERT INTO users (name, age, gender, address)
  VALUES ($1, $2, $3, $4)
  RETURNING id
)
INSERT INTO authors (name, bio, user_id)
SELECT $5, $6, id FROM new_user
`

type CreateUserAndAuthorParams struct {
	Name    string
	Age     pgtype.Int4
	Gender  pgtype.Text
	Address pgtype.Text
	Name_2  string
	Bio     pgtype.Text
}

func (q *Queries) CreateUserAndAuthor(ctx context.Context, arg CreateUserAndAuthorParams) error {
	_, err := q.db.Exec(ctx, createUserAndAuthor,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Address,
		arg.Name_2,
		arg.Bio,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, age, gender, address FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.Address,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, age, gender, address FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Gender,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
